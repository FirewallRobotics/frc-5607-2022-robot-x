// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Shooter extends SubsystemBase {
    //private static WPI_TalonSRX Turret = new WPI_TalonSRX(RobotMap.TURRET_ADDRESS);
    private static WPI_TalonSRX Shooter = new WPI_TalonSRX(RobotMap.FIRST_SHOOTER_ADDRESS);
    //private static WPI_TalonSRX Shooter2 = new WPI_TalonSRX(RobotMap.SECOND_SHOOTER_ADDRESS);
    //private final AS5600EncoderPwm encoder = new AS5600EncoderPwm(Turret.getSensorCollection());
    //private static DigitalOutput ledRing = new DigitalOutput(RobotMap.LED_RELAY_ADDRESS);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public Shooter() {
        //Turret.configFactoryDefault();
        Shooter.configFactoryDefault();
        //Shooter2.configFactoryDefault();

        //Turret.configSelectedFeedbackSensor(FeedbackDevice.PulseWidthEncodedPosition);
        //Shooter.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Relative);
        Shooter.setNeutralMode(NeutralMode.Coast);
        Shooter.setNeutralMode(NeutralMode.Coast);
        //Shooter2.follow(Shooter);
        ledRing.set(false);
        /* Config sensor used for Primary PID [Velocity] */
    /*Shooter.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Relative,
        RobotMap.kPIDLoopIdx, 
        RobotMap.kTimeoutMs); */

    /**
    * Phase sensor accordingly. 
    * Positive Sensor Reading should match Green (blinking) Leds on Talon
    */
    Shooter.setSensorPhase(true);

    /* Config the peak and nominal outputs */
    Shooter.configNominalOutputForward(0, RobotMap.kTimeoutMs);
    Shooter.configNominalOutputReverse(0, RobotMap.kTimeoutMs);
    Shooter.configPeakOutputForward(1, RobotMap.kTimeoutMs);
    Shooter.configPeakOutputReverse(-1, RobotMap.kTimeoutMs);

    /* Config the Velocity closed loop gains in slot0 */
    Shooter.config_kF(RobotMap.kPIDLoopIdx, RobotMap.kF, RobotMap.kTimeoutMs);
    Shooter.config_kP(RobotMap.kPIDLoopIdx, RobotMap.kP, RobotMap.kTimeoutMs);
    Shooter.config_kI(RobotMap.kPIDLoopIdx, RobotMap.kI, RobotMap.kTimeoutMs);
    Shooter.config_kD(RobotMap.kPIDLoopIdx, RobotMap.kD, RobotMap.kTimeoutMs);
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        SmartDashboard.putNumber("Turret Encoder", getMeasurement());
        SmartDashboard.putNumber("Shooter Speed", getShooterSpeed());
        SmartDashboard.putBoolean("ledRing.get", ledRing.get());
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

